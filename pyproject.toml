[project]
name = "pynetmito"
version = "0.0.2"
description = "Python Client SDK for mitosis"
readme = "README.md"
authors = [{ name = "BobAnkh", email = "bobankhshen@gmail.com" }]
requires-python = ">=3.10"
dependencies = [
    "httpx>=0.28.1",
    "platformdirs>=4.4.0",
    "pydantic>=2.11.7",
    "python-dateutil>=2.9.0.post0",
]
license = { text = "Apache-2.0" }
keywords = [
  "SDK",
  "Client",
  "API",
  "Async",
  "HTTP",
  "REST",
  "mitosis",
  "Distributed",
  "evaluation",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Environment :: Web Environment",
  "Framework :: AsyncIO",
  "Intended Audience :: Developers",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: Apache Software License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Distributed Computing",
  "Topic :: Utilities",
]

[build-system]
requires = ["hatchling", "uv-dynamic-versioning"]
build-backend = "hatchling.build"

[project.urls]
Documentation = "https://docs.stack.rs/mitosis/"
Homepage = "https://github.com/stack-rs/mitosis"
Source = "https://github.com/stack-rs/mitosis"

[tool.hatch.build.targets.sdist]
include = ["/httpx", "/README.md"]

[tool.hatch.build.targets.wheel]
packages = ["src/pynetmito"]

[tool.git-cliff.changelog]
header = """# Changelog

All notable changes to this project will be documented in this file.

"""

body = """
{%- macro remote_url() -%}
  https://github.com/stack-rs/mitosis-python-sdk
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} - \
        ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}](<REPO>/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}](<REPO>/releases/tag/{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}
{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}
  ## New Contributors
{% endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  - @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif %}

"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors
postprocessors = [
  { pattern = '<REPO>', replace = "https://github.com/stack-rs/mitosis" }, # replace repository URL
]

[tool.git-cliff.git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # Replace issue numbers
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))" },
  # Check spelling of the commit with https://github.com/crate-ci/typos
  # If the spelling is incorrect, it will be automatically fixed.
  #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
commit_parsers = [
  { message = "^feat", group = "<!-- 0 -->Features" },
  { message = "^fix", group = "<!-- 1 -->Bug Fixes" },
  { message = "^doc", group = "<!-- 3 -->Documentation" },
  { message = "^perf", group = "<!-- 4 -->Performance" },
  { message = "^refactor\\(clippy\\)", skip = true },
  { message = "^refactor", group = "<!-- 2 -->Refactor" },
  { message = "^style", group = "<!-- 5 -->Styling" },
  { message = "^test", group = "<!-- 6 -->Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(release\\): bump version", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore\\(npm\\).*yarn\\.lock", skip = true },
  { message = "^chore|^ci", group = "<!-- 7 -->Miscellaneous Tasks" },
  { body = ".*security", group = "<!-- 8 -->Security" },
  { message = "^revert", group = "<!-- 9 -->Revert" },
]
# regex for matching git tags
tag_pattern = "v[0-9].*"
# regex for skipping tags
skip_tags = "beta|alpha"
# regex for ignoring tags
ignore_tags = "rc"
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "newest"
